use ecommercess;
CREATE TABLE customers (
id INT AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(100) NOT NULL,
email VARCHAR(100) UNIQUE,
address VARCHAR(255) NOT NULL
);

DESCRIBE customers;

CREATE TABLE orders(
id INT AUTO_INCREMENT PRIMARY KEY,
customer_id INT,
order_date DATE,
total_amount DECIMAL(10,2),
FOREIGN KEY (customer_id) REFERENCES customers(id)
);

DESCRIBE orders;

CREATE TABLE products(
id INT AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(100),
price DECIMAL(10,2),
description TEXT
);

DESCRIBE products;

INSERT INTO customers (name,email,address)
VALUES
('jhon doe','jhon@example.com','123 main st'),
('jane smith','jane@example.com','456 oak st'),
('mohamad shek','mahamad@example.com','765 pine st');

select * from customers;


INSERT INTO orders (customer_id, order_date, total_amount)
VALUES
(1,'2024-9-1',120.00),
(2,'2024-9-15',200.00),
(3,'2024-9-20',80.00);

select * from orders;

INSERT INTO products (name,price,description)
VALUES
('product A','50.00','description for product A'),
('product B','60.00','description for product B'),
('product C','80.00','description for product C');

select * from products;




//1. Retrieve all customers who have placed an order in the last 30 days.

Queries to Write:

SELECT DISTINCT customers.name
FROM customers
JOIN orders ON customers.id = orders.customer_id
WHERE orders.order_date >= CURDATE() - INTERVAL 30 day;


//2. Get the total amount of all orders placed by each customer.

Queries to Write:

SELECT customers.name, SUM(orders.total_amount) AS total_spent
FROM customers
JOIN orders on customers.id = orders.customer_id
GROUP BY customers.name;


//3. Update the price of Product C to 45.00.

Queries to Write:

UPDATE products 
set price = 45
WHERE id = 3;
select * from products;

//4. Add a new column discount to the products table.

Queries to Write:

ALTER TABLE products ADD COLUMN discount DECIMAL(5,2) DEFAULT(0.00);

select * from products;

//5. Retrieve the top 3 products with the highest price.

Queries to Write:

SELECT name,price FROM products ORDER BY price DESC LIMIT 3;



//6. Get the names of customers who have ordered Product A.

Queries to Write:

SELECT DISTINCT customers.name
FROM customers
JOIN orders ON customers.id = orders.customer_id
JOIN order_items ON orders.id = order_items.order_id
JOIN products ON order_items.product_id = products.id
WHERE products.name = 'product A' ;


//7. Join the orders and customers tables to retrieve the customer's name and order date for each order. 

Queries to Write:

SELECT customers.name, orders.order_date
FROM customers
JOIN orders ON customers.id = orders.customer_id;


//8. Retrieve the orders with a total amount greater than 150.00.

Queries to Write:

SELECT * FROM orders WHERE total_amount>150;

//9 .Normalize the database by creating a separate table for order items and updating the orders table to reference the order_items table.

Queries to Write:


CREATE TABLE order_items(
id INT AUTO_INCREMENT PRIMARY KEY,
order_id INT,
product_id INT,
quantity INT,
FOREIGN KEY (order_id) REFERENCES orders(id),
FOREIGN KEY (product_id) REFERENCES products(id)
);

DESCRIBE order_items;
 
INSERT INTO order_items (order_id, product_id,quantity)
VALUES
(1,1,2),
(2,2,1),
(3,1,1);

select * from order_items;

select order_id INT,product_id INT
FROM order_items
REDUCE FOREIGN KEY orders(order_id),FOREIGN KEY products(product_id);



//10 .Retrieve the average total of all orders.

Queries to Write:

SELECT AVG(total_amount) FROM orders;
